#!/bin/bash
while getopts y: flag
do
    case "${flag}" in
        y) year=${OPTARG};;
    esac
done

rm -rvf *-10m.json
mkdir -p build

if [ ! -f build/cb_2022_us_sldu_500k.shp ]; then
  curl -o build/cb.zip "https://www2.census.gov/geo/tiger/GENZ${year}/shp/cb_${year}_us_sldu_500k.zip"
  unzip -od build build/cb.zip cb.shp cb.dbf
  chmod a-x build/cb.*
fi

if [ ! -f build/cb_2022_us_sldl_500k.shp ]; then
  curl -o build/cb_2022_us_sldl_500k.zip "https://www2.census.gov/geo/tiger/GENZ${year}/shp/cb_${year}_us_sldl_500k.zip"
  unzip -od build build/cb_2022_us_sldl_500k.zip 
  chmod a-x build/cb_2022_us_sldl_500k.*
fi

if [ ! -f build/cb_2022_us_cd118_5m.shp ]; then
  curl -o build/cb_2022_us_cd118_5m.zip "https://www2.census.gov/geo/tiger/GENZ${year}/shp/cb_${year}_us_cd118_5m.zip"
  unzip -od build build/cb_2022_us_cd118_5m.zip 
  chmod a-x build/cb_2022_us_cd118_5m.*
fi
if [ ! -f build/cb_2022_us_cbsa_5m.shp ]; then
  curl -o build/cb_2022_us_cbsa_5m.zip "https://www2.census.gov/geo/tiger/GENZ${year}/shp/cb_${year}_us_cbsa_5m.zip"
  unzip -od build build/cb_2022_us_cbsa_5m.zip 
  chmod a-x build/cb_2022_us_cbsa_5m.*
fi

if [ ! -f build/cb_2022_us_county_5m.shp ]; then
  curl -o build/cb_2022_us_county_5m.zip "https://www2.census.gov/geo/tiger/GENZ${year}/shp/cb_${year}_us_county_5m.zip" 
  unzip -od build build/cb_2022_us_county_5m.zip 
  chmod a-x build/cb_2022_us_county_5m.*
fi

if [ ! -f build/cb_2022_us_state_5m.shp ]; then
  curl -o build/cb_2022_us_state_5m.zip "https://www2.census.gov/geo/tiger/GENZ2022/shp/cb_2022_us_state_5m.zip"
  unzip -od build build/cb_2022_us_state_5m.zip 
  chmod a-x build/cb_2022_us_state_5m.*
fi

if [ ! -f build/cb_2022_us_nation_5m.shp ]; then
  curl -o build/cb_2022_us_nation_5m.zip "https://www2.census.gov/geo/tiger/GENZ2022/shp/cb_2022_us_nation_5m.zip"
  unzip -od build build/cb_2022_us_nation_5m.zip 
  chmod a-x build/cb_2022_us_nation_5m.*
fi


# exit;


geo2topo -q 1e5 -n cbsa=<( \
    shp2json -n build/cb_2022_us_cbsa_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)") \
  | toposimplify -f -s 1e-7 \
  > cbsa-10m.json

geo2topo -q 1e5 -n cbsa=<( \
    shp2json -n build/cb_2022_us_cbsa_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)" \
      | geoproject -n "d3.geoAlbersUsa().scale(1300).translate([487.5, 305])") \
  | toposimplify -f -p 0.25 \
  > cbsa-albers-10m.json

geo2topo -q 1e5 -n cd=<( \
    shp2json -n build/cb_2022_us_cd118_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)") \
  | toposimplify -f -s 1e-7 \
  > cd-10m.json

geo2topo -q 1e5 -n cd=<( \
    shp2json -n build/cb_2022_us_cd118_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)" \
      | geoproject -n "d3.geoAlbersUsa().scale(1300).translate([487.5, 305])") \
  | toposimplify -f -p 0.25 \
  > cd-albers-10m.json

geo2topo -q 1e5 -n sldu=<( \
    shp2json -n build/cb_2022_us_sldu_500k.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)") \
  | toposimplify -f -s 1e-7 \
  > sldu-10m.json

geo2topo -q 1e5 -n sldu=<( \
    shp2json -n build/cb_2022_us_sldu_500k.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)" \
      | geoproject -n "d3.geoAlbersUsa().scale(1300).translate([487.5, 305])") \
  | toposimplify -f -p 0.25 \
  > sldu-albers-10m.json

geo2topo -q 1e5 -n sldl=<( \
    shp2json -n build/cb_2022_us_sldl_500k.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)") \
  | toposimplify -f -s 1e-7 \
  > sldl-10m.json

geo2topo -q 1e5 -n sldl=<( \
    shp2json -n build/cb_2022_us_sldl_500k.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)" \
      | geoproject -n "d3.geoAlbersUsa().scale(1300).translate([487.5, 305])") \
  | toposimplify -f -p 0.25 \
  > sldl-albers-10m.json

geo2topo -q 1e5 -n counties=<( \
    shp2json -n build/cb_2022_us_county_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)") \
  | toposimplify -f -s 1e-7 \
  | topomerge states=counties -k "d.id.slice(0, 2)" \
  | topomerge nation=states \
  | node ./properties.js \
  > counties-10m.json

geo2topo -q 1e5 -n counties=<( \
    shp2json -n build/cb_2022_us_county_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, delete d.properties, d)" \
      | geoproject -n "d3.geoAlbersUsa().scale(1300).translate([487.5, 305])") \
  | toposimplify -f -p 0.25 \
  | topomerge states=counties -k "d.id.slice(0, 2)" \
  | topomerge nation=states \
  | node ./properties.js \
  > counties-albers-10m.json

geo2topo -q 1e5 -n states=<( \
    shp2json -n build/cb_2022_us_state_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, d.properties = {name: d.properties.NAME}, d)") \
  | toposimplify -f -s 1e-7 \
  | topomerge nation=states \
  > states-10m.json

geo2topo -q 1e5 -n states=<( \
    shp2json -n build/cb_2022_us_state_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, d.properties = {name: d.properties.NAME}, d)" \
      | geoproject -n "d3.geoAlbersUsa().scale(1300).translate([487.5, 305])") \
  | toposimplify -f -p 0.25 \
  | topomerge nation=states \
  > states-albers-10m.json

geo2topo -q 1e5 -n nation=<( \
    shp2json -n build/cb_2022_us_nation_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, d.properties = {name: d.properties.NAME}, d)") \
  | toposimplify -f -s 1e-7 \
  > nation-10m.json

geo2topo -q 1e5 -n nation=<( \
    shp2json -n build/cb_2022_us_nation_5m.shp \
      | ndjson-filter "!/000$/.test(d.properties.GEOID)" \
      | ndjson-map "(d.id = d.properties.GEOID, d.properties = {name: d.properties.NAME}, d)" \
      | geoproject -n "d3.geoAlbersUsa().scale(1300).translate([487.5, 305])") \
  | toposimplify -f -p 0.25 \
  > nation-albers-10m.json

rm us.topojson*
mapshaper -i cbsa-10m.json,cd-10m.json,counties-10m.json,nation-10m.json,sldl-10m.json,sldu-10m.json,states-10m.json combine-files -o format=topojson us.topojson.json